{"ast":null,"code":"var _jsxFileName = \"/Users/yokiijay/Desktop/react-spring-1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSpring, animated, interpolate } from 'react-spring';\nexport default function Index() {\n  const {\n    o,\n    xyz,\n    color\n  } = useSpring({\n    from: {\n      o: 0,\n      xyz: [0, 0, 0],\n      color: 'red'\n    },\n    o: 1,\n    xyz: [10, 20, 5],\n    color: 'green'\n  });\n  return __jsx(animated.div, {\n    style: {\n      // If you can, use plain animated values like always, ...\n      // You would do that in all cases where values \"just fit\"\n      color,\n      // Unless you need to interpolate them\n      background: o.interpolate(o => `rgba(210, 57, 77, ${o})`),\n      // Which works with arrays as well\n      transform: xyz.interpolate((x, y, z) => `translate3d(${x}px, ${y}px, ${z}px)`),\n      // If you want to combine multiple values use the \"interpolate\" helper\n      border: interpolate([o, color], (o, c) => `${o * 10}px solid ${c}`),\n      // You can also form ranges, even chain multiple interpolations\n      padding: o.interpolate({\n        range: [0, 0.5, 1],\n        output: [0, 0, 10]\n      }).interpolate(o => `${o}%`),\n      // Interpolating strings (like up-front) through ranges is allowed ...\n      borderColor: o.interpolate({\n        range: [0, 1],\n        output: ['red', '#ffaabb']\n      }),\n      // There's also a shortcut for plain, optionless ranges ...\n      opacity: o.interpolate([0.1, 0.2, 0.6, 1], [1, 0.1, 0.5, 1])\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, o.interpolate(n => n.toFixed(2))\n  /* innerText interpolation ... */\n  );\n}","map":{"version":3,"sources":["/Users/yokiijay/Desktop/react-spring-1/pages/index.js"],"names":["useSpring","animated","interpolate","Index","o","xyz","color","from","background","transform","x","y","z","border","c","padding","range","output","borderColor","opacity","n","toFixed"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,cAAjD;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,GAAL;AAAUC,IAAAA;AAAV,MAAoBN,SAAS,CAAC;AAClCO,IAAAA,IAAI,EAAE;AAAEH,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AAAwBC,MAAAA,KAAK,EAAE;AAA/B,KAD4B;AAElCF,IAAAA,CAAC,EAAE,CAF+B;AAGlCC,IAAAA,GAAG,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAH6B;AAIlCC,IAAAA,KAAK,EAAE;AAJ2B,GAAD,CAAnC;AAOA,SACE,MAAC,QAAD,CAAU,GAAV;AACE,IAAA,KAAK,EAAE;AACL;AACA;AACAA,MAAAA,KAHK;AAIL;AACAE,MAAAA,UAAU,EAAEJ,CAAC,CAACF,WAAF,CAAcE,CAAC,IAAK,qBAAoBA,CAAE,GAA1C,CALP;AAML;AACAK,MAAAA,SAAS,EAAEJ,GAAG,CAACH,WAAJ,CACT,CAACQ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAc,eAAcF,CAAE,OAAMC,CAAE,OAAMC,CAAE,KADrC,CAPN;AAUL;AACAC,MAAAA,MAAM,EAAEX,WAAW,CAAC,CAACE,CAAD,EAAIE,KAAJ,CAAD,EAAa,CAACF,CAAD,EAAIU,CAAJ,KAAW,GAAEV,CAAC,GAAG,EAAG,YAAWU,CAAE,EAA9C,CAXd;AAYL;AACAC,MAAAA,OAAO,EAAEX,CAAC,CACPF,WADM,CACM;AAAEc,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAT;AAAsBC,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP;AAA9B,OADN,EAENf,WAFM,CAEME,CAAC,IAAK,GAAEA,CAAE,GAFhB,CAbJ;AAgBL;AACAc,MAAAA,WAAW,EAAEd,CAAC,CAACF,WAAF,CAAc;AACzBc,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkB;AAEzBC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,SAAR;AAFiB,OAAd,CAjBR;AAqBL;AACAE,MAAAA,OAAO,EAAEf,CAAC,CAACF,WAAF,CAAc,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,CAAhB,CAAd,EAAkC,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,CAAd,CAAlC;AAtBJ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA0BGE,CAAC,CAACF,WAAF,CAAckB,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,CAAV,CAAnB;AAAiC;AA1BpC,GADF;AA8BD","sourcesContent":["import { useSpring, animated, interpolate } from 'react-spring'\n\nexport default function Index() {\n  const { o, xyz, color } = useSpring({\n    from: { o: 0, xyz: [0, 0, 0], color: 'red' },\n    o: 1,\n    xyz: [10, 20, 5],\n    color: 'green'\n  })\n\n  return (\n    <animated.div\n      style={{\n        // If you can, use plain animated values like always, ...\n        // You would do that in all cases where values \"just fit\"\n        color,\n        // Unless you need to interpolate them\n        background: o.interpolate(o => `rgba(210, 57, 77, ${o})`),\n        // Which works with arrays as well\n        transform: xyz.interpolate(\n          (x, y, z) => `translate3d(${x}px, ${y}px, ${z}px)`\n        ),\n        // If you want to combine multiple values use the \"interpolate\" helper\n        border: interpolate([o, color], (o, c) => `${o * 10}px solid ${c}`),\n        // You can also form ranges, even chain multiple interpolations\n        padding: o\n          .interpolate({ range: [0, 0.5, 1], output: [0, 0, 10] })\n          .interpolate(o => `${o}%`),\n        // Interpolating strings (like up-front) through ranges is allowed ...\n        borderColor: o.interpolate({\n          range: [0, 1],\n          output: ['red', '#ffaabb']\n        }),\n        // There's also a shortcut for plain, optionless ranges ...\n        opacity: o.interpolate([0.1, 0.2, 0.6, 1], [1, 0.1, 0.5, 1])\n      }}\n    >\n      {o.interpolate(n => n.toFixed(2)) /* innerText interpolation ... */}\n    </animated.div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}